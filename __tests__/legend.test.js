import { r2dtLegend } from '../src/legend';

describe('r2dtLegend', () => {
    test('renders default legend when no template or source', () => {
        const html = r2dtLegend(null, null);
        expect(html).toContain('Generated by');
        expect(html).toContain('Learn more');
        expect(html).not.toContain('using the');
    });

    test('renders special case for R2R template', () => {
        const html = r2dtLegend('R2R', 'rfam');
        expect(html).toContain('using the <i>R2R</i> software');
    });

    test.each([
        ['crw', 'https://crw2-comparative-rna-web.org/', 'CRW'],
        ['rfam', 'https://rfam.org/', 'Rfam'],
        ['ribovision', 'http://apollo.chemistry.gatech.edu/RiboVision/', 'RiboVision'],
        ['gtrnadb', 'http://gtrnadb.ucsc.edu/', 'GtRNAdb'],
    ])('renders source link for %s', (src, url, text) => {
        const html = r2dtLegend('TemplateX', src);
        expect(html).toContain(`href="${url}"`);
        expect(html).toContain(text);
    });

    test('renders unknown source as plain text', () => {
        const html = r2dtLegend('TemplateX', 'MyDB');
        const container = document.createElement('div');
        container.innerHTML = html;

        const sourceSpan = container.querySelector('.r2dt-source-template-text');
        expect(sourceSpan.textContent).toContain('MyDB');

        const links = Array.from(sourceSpan.querySelectorAll('a')).map(a => a.textContent);
        expect(links).not.toContain('MyDB'); // MyDB should not be a link
    });

    test('always includes legend structure', () => {
        const html = r2dtLegend('TemplateX', 'rfam');
        expect(html).toContain('class="r2dt-legend-toggle-btn"');
        expect(html).toContain('class="r2dt-legend-content"');
        expect(html).toContain('r2dt-traveler-key');
    });
});
